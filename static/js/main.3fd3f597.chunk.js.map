{"version":3,"sources":["components/buttonList.js","components/listReview.js","components/section.js","App.js","index.js"],"names":["ButtonController","onHandleGood","onHandleNeutral","onHandleBad","type","onClick","ListReview","number","good","neutral","bad","percentReview","className","Section","title","children","App","state","handleBad","setState","previousState","handleNeutral","handleGood","countTotalFeedback","Object","values","reduce","a","b","countPositiveFeedbackPercentage","totalR","posR","this","total","Math","round","Component","defaultProps","amount","ReactDOM","render","document","querySelector"],"mappings":"oNAwBeA,EAtBU,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,gBAAiBC,EAAlC,EAAkCA,YAAlC,OACvB,oCACE,4BAAQC,KAAK,SAASC,QAASJ,GAA/B,QAGA,6BACA,6BACA,4BAAQG,KAAK,SAASC,QAASH,GAA/B,WAGA,6BACA,6BACA,4BAAQE,KAAK,SAASC,QAASF,GAA/B,SCaWG,EAxBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,IAAKC,EAA/B,EAA+BA,cAA/B,OACjB,6BACGJ,EAAS,EACR,0CAEA,6BACE,0BAAMK,UAAU,cAAhB,SAAoCJ,GACpC,0BAAMI,UAAU,iBAAhB,aAA2CH,GAC3C,0BAAMG,UAAU,aAAhB,QAAkCF,GAClC,0BAAME,UAAU,eAAhB,UAAsCL,GACtC,0BAAMK,UAAU,iBAAhB,sBACsBD,EADtB,QCGOE,EAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAKD,GACJC,ICDCC,E,4MAGJC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPQ,UAAY,WACV,EAAKC,UAAS,SAACC,GACb,MAAO,CACLV,IAAKU,EAAcV,IAAM,O,EAI/BW,cAAgB,WACd,EAAKF,UAAS,SAACC,GACb,MAAO,CACLX,QAASW,EAAcX,QAAU,O,EAIvCa,WAAa,WACX,EAAKH,UAAS,SAACC,GACb,MAAO,CACLZ,KAAMY,EAAcZ,KAAO,O,EAIjCe,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKR,OAAOS,QAAO,SAACC,EAAGC,GAC1C,OAAOD,EAAIC,M,EAGfC,gCAAkC,SAACC,EAAQC,GACzC,OAAQA,EAAOD,EAAU,K,uDAGjB,IAAD,EACwBE,KAAKf,MAA5BT,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBuB,EAAQD,KAAKT,qBACbZ,EAAgBuB,KAAKC,MACzBH,KAAKH,gCAAgCI,EAAOD,KAAKf,MAAMT,OAEzD,OACE,oCACE,kBAAC,EAAD,CAASM,MAAM,yBACb,kBAAC,EAAD,CACEb,aAAc+B,KAAKV,WACnBpB,gBAAiB8B,KAAKX,cACtBlB,YAAa6B,KAAKd,aAGtB,kBAAC,EAAD,CAASJ,MAAM,SACb,kBAAC,EAAD,CACEP,OAAQ0B,EACRzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,cAAeA,U,GA3DTyB,aAAZpB,EACGqB,aAAe,CAAEC,OAAQ,GAiEnBtB,QClEfuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.3fd3f597.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst ButtonController = ({ onHandleGood, onHandleNeutral, onHandleBad }) => (\r\n  <>\r\n    <button type=\"button\" onClick={onHandleGood}>\r\n      Good\r\n    </button>\r\n    <br />\r\n    <br />\r\n    <button type=\"button\" onClick={onHandleNeutral}>\r\n      Neutral\r\n    </button>\r\n    <br />\r\n    <br />\r\n    <button type=\"button\" onClick={onHandleBad}>\r\n      Bad\r\n    </button>\r\n  </>\r\n);\r\nButtonController.propTypes = {\r\n  onHandleGood: PropTypes.func.isRequired,\r\n  onHandleNeutral: PropTypes.func.isRequired,\r\n  onHandleBad: PropTypes.func.isRequired,\r\n};\r\nexport default ButtonController;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListReview = ({ number, good, neutral, bad, percentReview }) => (\r\n  <div>\r\n    {number < 1 ? (\r\n      <p>No feedback</p>\r\n    ) : (\r\n      <div>\r\n        <span className=\"goodReview\">Good: {good}</span>\r\n        <span className=\"neutralReview\"> Neutral: {neutral}</span>\r\n        <span className=\"badReview\">Bad: {bad}</span>\r\n        <span className=\"totalReview\">Total: {number}</span>\r\n        <span className=\"percentReview\">\r\n          Positive feedback: {percentReview}%\r\n        </span>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\nListReview.propTypes = {\r\n  number: PropTypes.number.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  percentReview: PropTypes.number.isRequired,\r\n};\r\nexport default ListReview;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n};\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport ButtonController from \"./components/buttonList\";\nimport ListReview from \"./components/listReview\";\nimport Section from \"./components/section\";\nclass App extends Component {\n  static defaultProps = { amount: 0 };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  handleBad = () => {\n    this.setState((previousState) => {\n      return {\n        bad: previousState.bad + 1,\n      };\n    });\n  };\n  handleNeutral = () => {\n    this.setState((previousState) => {\n      return {\n        neutral: previousState.neutral + 1,\n      };\n    });\n  };\n  handleGood = () => {\n    this.setState((previousState) => {\n      return {\n        good: previousState.good + 1,\n      };\n    });\n  };\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((a, b) => {\n      return a + b;\n    });\n  };\n  countPositiveFeedbackPercentage = (totalR, posR) => {\n    return (posR / totalR) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const percentReview = Math.round(\n      this.countPositiveFeedbackPercentage(total, this.state.good)\n    );\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <ButtonController\n            onHandleGood={this.handleGood}\n            onHandleNeutral={this.handleNeutral}\n            onHandleBad={this.handleBad}\n          />\n        </Section>\n        <Section title=\"Stats\">\n          <ListReview\n            number={total}\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            percentReview={percentReview}\n          />\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}