{"version":3,"sources":["components/buttonList.js","components/listReview.js","components/section.js","App.js","index.js"],"names":["ButtonController","onHahdleChange","good","bad","neutral","type","value","onClick","ListReview","number","percentReview","className","Section","title","children","App","state","handleChange","target","setState","prevState","countTotalFeedback","Object","values","reduce","a","b","countPositiveFeedbackPercentage","totalR","posR","this","total","Math","round","onHandleChange","Component","defaultProps","amount","ReactDOM","render","document","querySelector"],"mappings":"2NAsBeA,EApBU,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,IAAKC,EAA9B,EAA8BA,QAA9B,OACvB,oCACE,4BAAQC,KAAK,SAASC,MAAOJ,EAAMK,QAASN,GAA5C,QAGA,6BACA,6BACA,4BAAQI,KAAK,SAASC,MAAOF,EAASG,QAASN,GAA/C,WAGA,6BACA,6BACA,4BAAQI,KAAK,SAASC,MAAOH,EAAKI,QAASN,GAA3C,SCaWO,EAxBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQP,EAAX,EAAWA,KAAME,EAAjB,EAAiBA,QAASD,EAA1B,EAA0BA,IAAKO,EAA/B,EAA+BA,cAA/B,OACjB,6BACGD,EAAS,EACR,0CAEA,6BACE,0BAAME,UAAU,cAAhB,SAAoCT,GACpC,0BAAMS,UAAU,iBAAhB,aAA2CP,GAC3C,0BAAMO,UAAU,aAAhB,QAAkCR,GAClC,0BAAMQ,UAAU,eAAhB,UAAsCF,GACtC,0BAAME,UAAU,iBAAhB,sBACsBD,EADtB,QCGOE,EAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAKD,GACJC,ICDCC,E,4MAGJC,MAAQ,CACNd,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAEPc,aAAe,YAAiB,IACtBX,EADqB,EAAbY,OACRZ,MACR,EAAKa,UAAS,SAACC,GACb,OAAO,eAAGd,EAAQc,EAAUd,GAAS,O,EAGzCe,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAGC,GAC1C,OAAOD,EAAIC,M,EAGfC,gCAAkC,SAACC,EAAQC,GACzC,OAAQA,EAAOD,EAAU,K,uDAGjB,IAAD,EACwBE,KAAKd,MAA5Bd,EADD,EACCA,KAAME,EADP,EACOA,QAASD,EADhB,EACgBA,IACjB4B,EAAQD,KAAKT,qBACbX,EAAgBsB,KAAKC,MACzBH,KAAKH,gCAAgCI,EAAOD,KAAKd,MAAMd,OAEzD,OACE,oCACE,kBAAC,EAAD,CAASW,MAAM,yBACb,kBAAC,EAAD,CACEqB,eAAgBJ,KAAKb,aACrBf,KAAM4B,KAAKd,MAAMd,KACjBE,QAAS0B,KAAKd,MAAMZ,QACpBD,IAAK2B,KAAKd,MAAMb,OAGpB,kBAAC,EAAD,CAASU,MAAM,SACb,kBAAC,EAAD,CACEJ,OAAQsB,EACR7B,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLO,cAAeA,U,GA7CTyB,aAAZpB,EACGqB,aAAe,CAAEC,OAAQ,GAmDnBtB,QCpDfuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.fa38d616.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst ButtonController = ({ onHahdleChange, good, bad, neutral }) => (\r\n  <>\r\n    <button type=\"button\" value={good} onClick={onHahdleChange}>\r\n      Good\r\n    </button>\r\n    <br />\r\n    <br />\r\n    <button type=\"button\" value={neutral} onClick={onHahdleChange}>\r\n      Neutral\r\n    </button>\r\n    <br />\r\n    <br />\r\n    <button type=\"button\" value={bad} onClick={onHahdleChange}>\r\n      Bad\r\n    </button>\r\n  </>\r\n);\r\nButtonController.propTypes = {\r\n  onHandleChange: PropTypes.func.isRequired,\r\n};\r\nexport default ButtonController;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListReview = ({ number, good, neutral, bad, percentReview }) => (\r\n  <div>\r\n    {number < 1 ? (\r\n      <p>No feedback</p>\r\n    ) : (\r\n      <div>\r\n        <span className=\"goodReview\">Good: {good}</span>\r\n        <span className=\"neutralReview\"> Neutral: {neutral}</span>\r\n        <span className=\"badReview\">Bad: {bad}</span>\r\n        <span className=\"totalReview\">Total: {number}</span>\r\n        <span className=\"percentReview\">\r\n          Positive feedback: {percentReview}%\r\n        </span>\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\nListReview.propTypes = {\r\n  number: PropTypes.number.isRequired,\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  percentReview: PropTypes.number.isRequired,\r\n};\r\nexport default ListReview;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n};\r\nexport default Section;\r\n","import React, { Component } from \"react\";\nimport ButtonController from \"./components/buttonList\";\nimport ListReview from \"./components/listReview\";\nimport Section from \"./components/section\";\nclass App extends Component {\n  static defaultProps = { amount: 0 };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  handleChange = ({ target }) => {\n    const { value } = target;\n    this.setState((prevState) => {\n      return { [value]: prevState[value] + 1 };\n    });\n  };\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((a, b) => {\n      return a + b;\n    });\n  };\n  countPositiveFeedbackPercentage = (totalR, posR) => {\n    return (posR / totalR) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const percentReview = Math.round(\n      this.countPositiveFeedbackPercentage(total, this.state.good)\n    );\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <ButtonController\n            onHandleChange={this.handleChange}\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n          />\n        </Section>\n        <Section title=\"Stats\">\n          <ListReview\n            number={total}\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            percentReview={percentReview}\n          />\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}